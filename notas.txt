Estructura de la API para documentacion:

CLIENTES
            "/platos" => GET listado de todos los platos
            "/platos/id" => GET información de un plato por id.
            "/nuevopedido" => POST realizar una nueva orden/pedido


            Dudas: ¿Tengo que hacer un post con la orden y dsp hacer otro get con esa info para "confirmar pedido" o no es necesario?


ADMINS (AUTH REQUIRED)
            "/pedidos" => GET listado de todos los pedidos de todos los usuarios
            "/pedidos/id" => PUT actualizar un pedido por id del pedido
            "/platos" => POST cargar nuevo producto


ORDENES ?? (para permitir al usuario ver su pedido y el estado del mismo)
            "/miorden" => GET detalles de la orden por id de la orden (** Pero el path sería "cliente/miorden"????)


Modelos de entidades:

CLIENTE: {
    cliente_id: INT PK Autoincrement NOT NULL,
    usuario: VARCHAR(255),
    nombre y apellido: VARCHAR(255),
    email: VARCHAR(255),
    telefono: VARCHAR(255),
    direccion: VARCHAR(255),
    password ?????????????????????
}


(MEJOR CREAR UNA TABLA DE ROLES!)
ADMINISTRADOR: {
    admin_id: INT PK Autoincrement NOT NULL,
    usuario: VARCHAR(255),
    password ??????
    admin: true
}

PLATO: {
    plato_id: INT PL Autoincrement NOT NULL,
    nombre: VARCHAR(200) NOT NULL,
    precio: DOUBLE NOT NULL,
    src: VARCHAR(500) NOT NULL,
    active: TINYINT (1) NOT NULL  DEFAULT(1) // PORQUE NO SE HACEN DELETES; SE BORRA A NIVEL LÓGICO
}

ORDEN: {
    order_ id: INT PK Autoincrement NOT NULL,
    precio: DOUBLE NOT NULL,
    estado: ENUM('NUEVO','PREPARANDO','CONFIRMADO','ENVIANDO','CANCELADO','ENTREGADO') DEFAULT/EXPRESSION('NUEVO'),
    fecha: DATETIME NOT NULL DEFAULT/EXPRESSION(CURRENT_TIMESTAMP),
    ???????descripcion: (RELACION DE MUCHOS A MUCHOS ("PEDIDOS_HAS_PLATOS")),
    forma_pago: ENUM('CREDITO','CASH','DEBITO','MERCADOPAGO') NOT NULL,
    usuario: FOREIGN_KEY apuntando a 'cliente_id' en tabla 'Clientes'
    direccion: FOREIGN_KEY apuntando a 'direccion' en tabla 'Clientes',
}
*******numero: podría ser el id del pedido,


//==========================================
//==========================================
//==========================================
SQL PARA CREAR BASE DE DATOS CLASE DANY

-- MySQL Workbench Forward Engineering
​
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
​
-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
​
-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `proyectodelillah` DEFAULT CHARACTER SET utf8 ;
-- -----------------------------------------------------
-- Schema proyectodelillah
-- -----------------------------------------------------
USE `proyectodelillah` ;
​
-- -----------------------------------------------------
-- Table `proyectodelillah`.`rols`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proyectodelillah`.`rols` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;
​
​
-- -----------------------------------------------------
-- Table `proyectodelillah`.`usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proyectodelillah`.`usuarios` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `usuario` VARCHAR(100) NOT NULL,
  `nombre` VARCHAR(500) NOT NULL,
  `correo` VARCHAR(500) NOT NULL,
  `telefono` VARCHAR(300) NOT NULL,
  `direccion` VARCHAR(500) NOT NULL,
  `contrasena` VARCHAR(50) NOT NULL,
  `rols_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_usuarios_rols1_idx` (`rols_id` ASC) ,
  CONSTRAINT `fk_usuarios_rols1`
    FOREIGN KEY (`rols_id`)
    REFERENCES `proyectodelillah`.`rols` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;
​
​
-- -----------------------------------------------------
-- Table `proyectodelillah`.`platos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proyectodelillah`.`platos` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(200) NOT NULL,
  `precio` DOUBLE NOT NULL,
  `activo` TINYINT(1) NOT NULL DEFAULT 1,
  `imagen` VARCHAR(500) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;
​
​
-- -----------------------------------------------------
-- Table `proyectodelillah`.`pedidos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proyectodelillah`.`pedidos` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `precio_total` DOUBLE NOT NULL,
  `fecha` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `estado` ENUM('NUEVO', 'PREPARANDO', 'CONFIRMADO', 'ENVIANDO', 'CANCELADO', 'ENTREGADO') NOT NULL DEFAULT 'NUEVO',
  `formas_pago` ENUM('TC', 'CASH', 'PSE', 'PAYPAL', 'MP') NOT NULL,
  `usuarios_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_pedidos_usuarios_idx` (`usuarios_id` ASC) ,
  CONSTRAINT `fk_pedidos_usuarios`
    FOREIGN KEY (`usuarios_id`)
    REFERENCES `proyectodelillah`.`usuarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;
​
​
-- -----------------------------------------------------
-- Table `proyectodelillah`.`pedidos_has_platos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proyectodelillah`.`pedidos_has_platos` (
  `pedidos_id` INT NOT NULL,
  `platos_id` INT NOT NULL,
  `cantidad` INT NULL,
  PRIMARY KEY (`pedidos_id`, `platos_id`),
  INDEX `fk_pedidos_has_platos_platos1_idx` (`platos_id` ASC) ,
  INDEX `fk_pedidos_has_platos_pedidos1_idx` (`pedidos_id` ASC) ,
  CONSTRAINT `fk_pedidos_has_platos_pedidos1`
    FOREIGN KEY (`pedidos_id`)
    REFERENCES `proyectodelillah`.`pedidos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidos_has_platos_platos1`
    FOREIGN KEY (`platos_id`)
    REFERENCES `myproyectodelillah`.`platos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;
​
​
SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


//==========================================
//==========================================
//==========================================